export type TcConfig = {
  delay?:number,
  time:number,
  bonus?:number,

  moves?:number,      // is the time allocated to a number of moves
  nextOnMoves?:true,  // if present, then using up moves before time will move to next period rather than reset, which is default if there are moves
  periods?:number,    // if present when moves are used up with any remaining time, then reset (unless nextOnMoves)
  forwardRemainingTime?:true,      // when nextOnMOves is true, on may forwardRemainingTIme send remaingTime to next period/stage
  giftUsedTime?:true, // after each move, distribute time used equally among other clocks' current remTime
};

export type TcState = {

  config:TcConfig[],
  configIndex:number, // which config is the operative one

  remDelay:number,
  remTime:number,
  remPeriods:number,
  remMoves:number,  // many moves are remaining in current period

};

type TcEvtOperate = {
  type: string,
  player: string,
  timestamp: number,
};


// events generated by the clock
type TcEvtTerminate = TcEvtOperate & {
  type: 'Terminate',
};

type TcEvtNextPeriod = TcEvtOperate &  {
  type: 'Next',
};

type TcEvtResetPeriod = TcEvtOperate &  {
  type: 'Reset',
};


// setup events, these build configurations for players
// type TcEvtConfig =

// Operate events are operating the clock, events going into the clock
type TcEvtStart = TcEvtOperate &  { type: 'Start'};
type TcEvtPause = TcEvtOperate &  { type: 'Pause'};
type TcEvtStop  = TcEvtOperate &  { type: 'Stop'};


export type TcOutEvent = TcEvtResetPeriod | TcEvtNextPeriod | TcEvtTerminate;
export type TcInEvent  = TcEvtStart | TcEvtPause | TcEvtStop;

// since starting one, requires stopping another we use the stop event produced time for the start event
export function tcStartNow(player:string, timestamp:number): TcEvtStart
{
  return { type: 'Start', player, timestamp };
}
export function tcStopNow(player:string): TcEvtStop
{
  return { type: 'Stop', player, timestamp:performance.now()};
}
export function tcPauseNow(player:string): TcEvtPause
{
  return { type: 'Pause', player, timestamp:performance.now()};
}
